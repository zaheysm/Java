
import java.util.LinkedList;

class Node {

	
		/**This variable represents the data item stored in the node   */
		public Course course; // data item
		/**This variable represents the next node stored after a certain node in the list  */
		public Node next; // next node in list
		/**This variable represents the previous node stored after a certain node in the list  */
		public Node previous; // previous node in list
	// -------------------------------------------------------------

		/**
		 * This is a parameterized constructor that store a new number in the list
		 * @param d This is the number to be stored in the list
		 */
		public Node(Course course) // constructor
		{
			course=new Course();
		}

	// -------------------------------------------------------------
		/**
		 * This is a method that displays the data stored in each node in our list
		 */
//		// display this node data
//		public void displayNode() {
//			System.out.print(mData + " ");
//		}
}







public class CourseList {
	
	
	/** This variable represents the first node in our list */
	private Node first;
	/** This variable represents the last node in our list  */
	private Node last;
	LinkedList<Course> course=new LinkedList<Course>();
	Course courseList=new Course();
	
	
	/**
	 * This is a no -argument constructor to initialize the nodes values to null.
	 */
	public CourseList() { //Constructor
		//initialize first node to null
		first = null;
		//initialize last node to null
		last = null;
	}
	
	
	
	
	/**
	 * This method checks if first node is null .
	 * @return true if the first node is null ,otherwise return false.
	 */
	public boolean isEmpty() {
		return first == null;
	}
	
	
	
	
	
	
	
	
	
	
	
	int largestElement(Node head) 
	{ 
	      
	    // Declare a max variable and initialize 
	    // it with INT_MIN value. 
	    // INT_MIN is integer type and its value 
	    // is -32767 or less. 
	    int max = Integer.MIN_VALUE; 
	  
	    // Check loop while head not equal to NULL 
	    while (head != null)
	    { 
	  
	        // If max is less then head->data then 
	        // assign value of head->data to max 
	        // otherwise node point to next node. 
	        if (max < head.data) 
	            max = head.data; 
	        head = head.next; 
	    } 
	    return max; 
	}
	  
	
	/**
	 * This method inserts a number at the front of our list as it will be the
	 * new head of our list.
	 * @param num This is the number to be inserted at the front of our list
	 */
	public void insertFirst(String courseNum,String CourseName,int enroll,int waitList) {
		//create a node object
		Course course=new Course(courseNum,CourseName,enroll,waitList);
		Node newNode = new Node(course);
		
		//checking if first node is null
		if (isEmpty())
			//declaring the new node to be the last node in our list
			last = newNode;
		else
			
			first.previous = newNode;
		newNode.next = first;
		first = newNode;
	}

// -------------------------------------------------------------
	
	/**
	 * This method inserts a number at the rear of our list as it will be the
	 * new tail of our list.
	 * @param num This is the number to be inserted at the rear of our list
	 */
	public void insertLast(String courseNum,String CourseName,int enroll,int waitList) {
		Course course=new Course(courseNum,CourseName,enroll,waitList);
		Node newNode = new Node(course);
		if (isEmpty())
			first = newNode;
		else {
			last.next = newNode;
			newNode.previous = last;
		}
		last = newNode;
	}
	
	
	/**
	 * @param prev_node
	 * @param new_data
	 */
	/*public void insertAfter(Node prev_node, int new_data)
	{
	    // 1. Check if the given Node is null 
	    if (prev_node == null)
	    {
	        System.out.println("The given previous node cannot be null");
	        return;
	    }
	 
	    //2. Allocate the Node &
	   // 3. Put in the data
	    Node new_node = new Node(new_data);
	 
	    // 4. Make next of new Node as next of prev_node 
	    new_node.next = prev_node.next;
	 
	    // 5. make next of prev_node as new_node
	    prev_node.next = new_node;
	}
	*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
